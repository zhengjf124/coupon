<?php
namespace Application;

class ApiController extends \Think\Controller
{
    protected $_app = '';

    protected $_platform = '';

    public function __construct()
    {
        header("Access-Control-Allow-Origin: *");
        if (I('_app')) {
            $this->_app = I('_app');
        } else {
            // $this->_returnError('10000', '_app is null');
        }
        if (I('_platform')) {
            $this->_platform = I('_platform');
        } else {
            // $this->_returnError('10000', '_platform is null');
        }

    }

    /**
     * 用户凭证判断
     */
//    public function _passport() {
//        if (I('_passport')) {
//            //判断票据是否有效
//            $passport = I("_passport");
//            $res = M('User')->where(array('id'=>$passport))->find();
//            if($res){
//                return $res;
//            }else{
//                $this->_returnError('20000', '_passport is error');
//            }
//        } else {
//            $this->_returnError('20000', '_passport is null');
//        }
//    }

    /**
     * 验证passport 返回登录的用户信息
     * @param bool|true $require
     * @return bool|mixed
     */
    protected function _checkPassport($require = true)
    {
        $passport = I('_passport');

        if (!$passport) {
            $this->_returnError('10000', 'passport is null');
        }

        $res = M('UserPassport')->where(['passport' => $passport])->find();
        if ($res) {
            $userInfo = M('User')->where(['id' => $res['user_id']])->find();
            if ($userInfo) {
                return $userInfo;
            }
        }

        if ($require) {
            $this->_returnError('20000', 'no login');
        } else {
            return false;
        }


    }

    protected function _createPassport($user) {
        // 这个地方两次操作数据库也是没有必要的 写一句delete即可
        $passport_id = M('UserPassport')->where(['user_id' => $user['id']])->getField('id');
        if ($passport_id) {
            M('UserPassport')->where(['user_id' => $user['id']])->delete();
        }
        $passport = md5(rand(1, 99999));
        M("UserPassport")->data(['passport' => $passport, 'user_id' => $user['id'], 'add_time' => time()])->add();

        return $passport;
    }


    protected function _returnError($code, $message)
    {
        $this->ajaxReturn([
            'error_code' => $code,
            'message' => $message,
        ]);
    }

    protected function _returnData($data)
    {
        $this->ajaxReturn([
            'error_code' => 0,
            'message' => '',
            'data' => $data
        ]);
    }

    protected function _curlGet($url)
    {
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, $url);

        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, FALSE);
        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, FALSE);
        curl_setopt($ch, CURLOPT_USERAGENT, 'Mozilla/5.0 (compatible; MSIE 5.01; Windows NT 5.0)');
        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1);
        curl_setopt($ch, CURLOPT_AUTOREFERER, 1);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);

        $info = curl_exec($ch);

        if (curl_errno($ch)) {
            echo 'Errno'.curl_error($ch);
        }

        curl_close($ch);

        return $info;

    }

    protected function _curlPost($url,$data)
    {
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, $url);
        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, "POST");
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, FALSE);
        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, FALSE);
        curl_setopt($ch, CURLOPT_USERAGENT, 'Mozilla/5.0 (compatible; MSIE 5.01; Windows NT 5.0)');
        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1);
        curl_setopt($ch, CURLOPT_AUTOREFERER, 1);
        curl_setopt($ch, CURLOPT_POSTFIELDS, $data);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);

        $info = curl_exec($ch);

        if (curl_errno($ch)) {
            echo 'Errno'.curl_error($ch);
        }

        curl_close($ch);

        return $info;

    }


}